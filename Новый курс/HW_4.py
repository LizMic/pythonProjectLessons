# #22: Даны два неупорядоченных набора целых чисел (может быть, с повторениями).
# Выдать без повторений в порядке возрастания все те числа, которые встречаются в обоих наборах.
# Пользователь вводит 2 числа. n - кол-во элементов первого множества. m - кол-во элементов второго множества.
# Затем пользователь вводит сами элементы множеств.

some_set1 = {int(input("Введите значение>>")) for _ in range(int(input("Ввведите количество элементов N-множества>")))}
some_set2 = {int(input("Введите значение>>")) for _ in range(int(input("Ввведите количество элементов M-множества>")))}
a = some_set1.intersection(some_set2)
def quick_sort(array):
    if len(array) <=1:
        return array
    else:
        pivot = array[0]
    less = [i for i in array[1:] if i <= pivot]
    greater = [i for i in array[1:] if i > pivot]
    return quick_sort(less)+[pivot]+quick_sort(greater)
print(quick_sort(list(a)))


# #24: В фермерском хозяйстве в Карелии выращивают чернику. Она растет на круглой грядке,
# причем кусты высажены только по окружности. Таким образом, у каждого куста есть ровно два соседних.
# Всего на грядке растет N кустов. Эти кусты обладают разной урожайностью,
# поэтому ко времени сбора на них выросло различное число ягод – на i-ом кусте выросло ai ягод.
# В этом фермерском хозяйстве внедрена система автоматического сбора черники.
# Эта система состоит из управляющего модуля и нескольких собирающих модулей.
# Собирающий модуль за один заход, находясь непосредственно перед некоторым кустом,
# собирает ягоды с этого куста и с двух соседних с ним.
# Напишите программу для нахождения максимального числа ягод, которое может собрать за один заход собирающий модуль,
# находясь перед некоторым кустом заданной во входном файле грядки.

N = int(input("Ввведите количество кустов>"))
pul = list()
for i in range(N):
    berries_list = int(input("Введите количество ягод на кусте>>"))
    pul.append(berries_list)
print(pul)
pul_count = list()
for i in range(len(pul)-1):
    pul_count.append(pul[i-1]+pul[i]+pul[i+1])
pul_count.append(pul[-2]+pul[-1]+pul[0])
print(max(pul_count))
